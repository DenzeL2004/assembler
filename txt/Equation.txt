call MAIN 
hlt 

MAIN:                         
    call GET_ARGS
    call SOLVE 

ret

GET_ARGS:

    in
    pop rax         //Coefficient_a

    in
    pop rbx         //Coefficient_b

    in
    pop rcx         //Coefficient_c

ret

SOLVE:

    push rax
    push 0
    je LINEAR           //Coefficient_a_is_zero

    push rbx
    push 0
    je CF_B_IS_ZERO    //Coefficient_b_is_zero

    push rcx
    push 0
    je CF_C_IS_ZERO     //Coefficient_c_is_zero


    call SQUARE_SOLVE

ret



TWO_ROOT:
    push 2
    out
    
    out
    out
    hlt

ONE_ROOT:
    push 1
    out
    
    out
    hlt

ZERO_ROOT:
    push 0

    out
    hlt

INF_ROOT:
    push 9999

    out
    hlt

LINEAR:
    push rbx
    push 0

    jm SKIP_C_CHECK

        push rcx
        push 0

        je INF_ROOT

        jump ZERO_ROOT

    SKIP_C_CHECK:

    push 0
    push rcx
    sub

    push rbx

    div

    jump ONE_ROOT
    hlt

CF_B_IS_ZERO:            //Coefficient_b_is_zero
    push rcx

    dup
    push 0

    je ONE_ROOT         //Coefficient_c_is_zero

    dup                 
    push rax
    mult

    push 0              //Check_whether_coefficients_are_of_the_same_sign

    jb ZERO_ROOT        //Coefficient_c_greater_than_zero

    pop rcx
    
    push 0
    push rcx
    sub                 //sign_Coefficient_c_change

    push rax
    div

    sqrt
    dup


    pop [0]              //finding_the_second_root
    
    push 0
    push [0]
    sub 


    jump TWO_ROOT

    hlt

CF_C_IS_ZERO:

    push rbx
    push 0

    je ONE_ROOT         //Coefficient_b_is_zero

    push 0              //First_root

    push 0              
    push rbx
    sub   
    push rax
    div                 //Second_root
    
    jump TWO_ROOT

    hlt

GET_DISCRIMINANT:

    push rbx
    push rbx
    mult                //b^2

    push rax
    push rcx
    mult

    push 4
    mult                //4*a*c

    sub

    pop rdx             //discriminant

    ret

SQUARE_SOLVE:

call GET_DISCRIMINANT

    push 0
    push rdx

    jb ZERO_ROOT   //discriminant_is_negative


    push rdx
    sqrt


    pop [4]         //Sqrt_discriminant

    push 0
    push rbx
    sub

    pop [2]         //change_sign_b


    push [2]
    push [4]
    add

    push rax
    push 2
    mult

    div             //First_root

    push rdx
    push 0

    je ONE_ROOT   

    push [2]
    push [4]
    sub

    push rax
    push 2
    mult

    div             //Second_root

    jump TWO_ROOT

ret
